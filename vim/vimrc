""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                                        General
"                                                                  Configuration
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set autoread
set backupdir=/tmp//
set cursorline
set directory=/tmp//
set expandtab
set hidden
set hlsearch
set ignorecase
set incsearch
set nobackup
set noerrorbells
set noswapfile nowrap
set redrawtime=10000
set relativenumber
set scrolloff=8
set shortmess+=c
set smartindent smartcase
set tabstop=8 softtabstop=0 expandtab shiftwidth=2 smarttab
set undodir=/tmp//
set undofile
set updatetime=300

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                                        General
"                                                                       Mappings
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let mapleader = " "
nnoremap <silent> <ESC> <ESC>:nohlsearch<cr>
nnoremap <leader>c :tabnew $MYVIMRC<CR>
nnoremap <silent> <leader>x :bd<CR>
nnoremap <left> :cp<CR>
nnoremap <right> :cn<CR>
nnoremap - :Hexplore<cr>
nnoremap <silent> <leader>X :w <bar> %bd <bar> e# <bar> bd# <CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                                           Auto
"                                                                       commands
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd CursorHold * silent call CocActionAsync('highlight')
autocmd FileType * syntax sync fromstart
augroup auto_source_vimrc
  autocmd!
  autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                                        Plugins
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
call plug#begin('~/.vim/plugged')
Plug 'Raimondi/delimitMate'
Plug 'airblade/vim-gitgutter'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'mbbill/undotree'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'scrooloose/nerdtree'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'dyng/ctrlsf.vim'
call plug#end()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                                        Plugins
"                                                                  Configuration
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function LoadCustomConfig(pluginName)

  if a:pluginName == 'coc'
    autocmd CursorHold * silent call CocActionAsync('highlight')
    command! -nargs=0 Prettier :call CocAction('runCommand', 'prettier.formatFile')
    function! ShowDocumentation()
      if CocAction('hasProvider', 'hover')
        call CocActionAsync('doHover')
      else
        call feedkeys('K', 'in')
      endif
    endfunction
    nmap     <silent> [g <Plug>(coc-diagnostic-prev)
    nmap     <silent> ]g <Plug>(coc-diagnostic-next)
    nmap     <silent> gD <Plug>(coc-definition)
    nmap     <silent> gR <Plug>(coc-references)
    nmap     <silent> gI <Plug>(coc-implementation)
    nmap     <leader>a   :CocCommand<CR>
    nnoremap <silent>K   :call ShowDocumentation()<CR>
    xmap     <leader>a   <Plug>(coc-codeaction-selected)
  endif

  if a:pluginName == 'nerdtree'
    nnoremap <leader>n :NERDTreeFind <CR>
  endif

  if a:pluginName == 'undotree'
    nnoremap <leader>u :UndotreeShow <CR>
  endif

  if a:pluginName == 'vim-dispatch'
    autocmd FileType javascript let b:dispatch = 'node %'
    autocmd FileType typescript let b:dispatch = 'node %'
    nnoremap <F5> :w<CR>:Dispatch<CR>
    inoremap <F5> <ESC>:w<CR>:Dispatch<CR>
  endif

  if a:pluginName == 'vim-fugitive'
    nnoremap <leader>g :G <CR>
    nnoremap <leader>b :Git blame <CR>
    nnoremap <leader>l :tabnew \| :GcLog <CR>
  endif

  if a:pluginName == 'ctrlsf'
    nnoremap <leader>* <PLug>CtrlSFPrompt<C-R><C-W>
    nnoremap <leader>8 :CtrlSFOpen<cr>
    vmap     <leader>* <Plug>CtrlSFVwordPath<CR>
  endif

  if a:pluginName == 'blamer'
    let g:blamer_enabled = 1
    let g:blamer_delay = 1000
    highlight Blamer guifg=lightgrey
  endif

  if a:pluginName == 'fzf'
    nmap     <silent> <C-P> :GFiles <CR>
    nmap     <silent> <C-f> :Rg <CR>
    nnoremap <Leader>f :Files<CR>
    nnoremap <leader>/ :Lines <CR>
    nnoremap <leader>e :History<CR>
  endif
endfunction

for [name, spec] in items(g:plugs)
  let pluginName = split(name, '\.')[0]
  call LoadCustomConfig(pluginName)
endfor

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                                        Snippet
"                                                                          Codes
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <F2> oconsole.log()<ESC>F(a

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                                     Appearance
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                                     Statusline
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set laststatus=2
let b:git_modified_status = ""
autocmd BufReadPost,BufNewFile,BufWritePost * let b:git_modified_status = system('bash ~/.vim/scripts/file-days-ago.sh ' . shellescape(expand('%:p')))

let b:author = ""
autocmd CursorHold,BufReadPost * let b:author = system('bash ~/.vim/scripts/line-days-ago-author.sh ' . shellescape(expand('%') . ':' . line('.')))

set statusline=%f:%l\ %{b:author}%=%{b:git_modified_status}

